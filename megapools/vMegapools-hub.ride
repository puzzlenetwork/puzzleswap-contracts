{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let VERSION = "RANGEHUB-2.4.0"

let shutdownAddresses = [
  "3PMKAL4cd77onkYuuU35115Wov1sLMEcFsv",
  "3P9xX849YJXg7C87v82cDyDy5VhKiPJpHo8",
  "3PMcMiMEs6w56NRGacksXtFG5zS7doE9fpL"
]

## INTERNAL FUNCTIONS

func remove(li: List[String], val: String) = {
  func handler(accum: List[String], next: String) = {
    if (next == val) then {accum} else {accum ++ [next]}
  }
  FOLD<100>(li, [], handler)
}

func getEntryKey(type: String) = {
    if type == "range" then "global_emptyPools"
    else if type == "staker_AP4Cb5xLYGH6ZigHreCZHoXpQTWDkPsG2BHqfDUx6taJ" then "global_emptyStakers_AP4Cb5xLYGH6ZigHreCZHoXpQTWDkPsG2BHqfDUx6taJ"
    else "global_emptyUnknown"
}

func getCurrentPoolsBatch() = {
  let batch = getInteger("global_lastPoolsBatch").valueOrElse(2)
  let currentKey = "global_pools_" + batch.toString()
  let currentVal = getString(currentKey).valueOrElse("")
  if (currentVal.size() < 4800) then {batch} else {batch+1}
}

## CALLABLES

# to be called by new ranges

@Callable(i)
func useEmptyContract(type: String) = {
  let entryKey = getEntryKey(type)
  let contractsLi = getString(entryKey).valueOrElse("").split_4C(",").value()
  let emptyContract = contractsLi[0].valueOrElse("")

  let newContactsLi = if (emptyContract == "") then {contractsLi} else {contractsLi.remove(emptyContract)}

  ([
      StringEntry(entryKey, newContactsLi.makeString(","))
    ], emptyContract
  )
}

@Callable(i)
func addPool(address: String) = {
  let batch = getCurrentPoolsBatch()

  if (i.caller == this) then { # || or smart contract allowed
    [
      StringEntry("global_pools_"+batch.toString(), getString("global_pools_"+batch.toString()).valueOrElse("") + address + ","),
      IntegerEntry("global_lastPoolsBatch", batch)
    ]
  } else {
    throw("no access")
  }
}

@Callable(i)
func addSelfPool() = {
  let scriptStr = i.caller.scriptHash().value().toBase58String()
  if (getBoolean("approvedScript_"+scriptStr).valueOrElse(false)) then {
    strict inv = invoke(this, "addPool", [i.caller.toString()], [])

    []
  } else {throw("account script is not listed")}
}

# to be called by admins

@Callable(i)
func whitelistScript(scriptStr: String, val: Boolean) = {
  if (shutdownAddresses.indexOf(i.caller.toString()) != unit) then {
    [
      BooleanEntry("approvedScript_"+scriptStr, val)
    ]
  } else {
    throw("no access")
  }
}

@Callable(i)
func addEmptyContract(address: String, type: String) = {
  let entryKey = getEntryKey(type)

  if (i.caller == this) then {
    [
      StringEntry(entryKey, getString(entryKey).valueOrElse("") + address + ",")
    ]
  } else {
    throw("no access")
  }
}

@Callable(i)
func shutdownAssetIn(assetStr: String, val: Boolean) = {
  if (shutdownAddresses.indexOf(i.caller.toString()) != unit) then {
    [
      BooleanEntry("global_shutdownIn_"+assetStr, val)
    ]
  } else {
    throw("no access")
  }
}

@Callable(i)
func shutdownAssetOut(assetStr: String, val: Boolean) = {
  if (shutdownAddresses.indexOf(i.caller.toString()) != unit) then {
    [
      BooleanEntry("global_shutdownOut_"+assetStr, val)
    ]
  } else {
    throw("no access")
  }
}
